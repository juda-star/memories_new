{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Yehuda/Desktop/tech career/projects/git/memoriesNew/memories/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"C:/Users/Yehuda/Desktop/tech career/projects/git/memoriesNew/memories/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { gapi, gapiComplete } from './gapiScript';\n\n/**\n * Function to load gapi auth2 from a gapi that you provied\n * Check full docs here: https://developers.google.com/identity/sign-in/web/reference#auth_setup\n * @param {Object} gapiScript gapi script object\n * @param {string} clientId Your google clientID string\n * @param {Array.<string[]>} scopes The scopes to request, as a space-delimited string. Optional if fetch_basic_profile is not set to false. Check possible scopes on google docs: https://developers.google.com/identity/protocols/oauth2/scopes\n */\nvar loadAuth2 = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(gapiScript, clientId, scopes) {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", new Promise(function (resolve) {\n              gapiScript.load('auth2', function () {\n                resolve(gapiScript.auth2.init({\n                  client_id: clientId,\n                  scope: scopes\n                }));\n              });\n            }));\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return function loadAuth2(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n/**\n * Function to init gapi auth2 with props\n * @param {Object} gapiScript gapi script object\n * @param {*} props Possible props to init gapi auth2, check the options on google docs: https://developers.google.com/identity/sign-in/web/reference#gapiauth2clientconfig\n */\nvar loadAuth2WithProps = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(gapiScript, props) {\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            return _context2.abrupt(\"return\", new Promise(function (resolve) {\n              gapiScript.load('auth2', function () {\n                resolve(gapiScript.auth2.init(props));\n              });\n            }));\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return function loadAuth2WithProps(_x4, _x5) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\n/**\n *\n * @param {Object} gapiScript gapi script object\n * @param {string} clientId Your google clientID string\n * @param {Array.<string[]>} scopes The scopes to request, as a space-delimited string. Optional if fetch_basic_profile is not set to false. Check possible scopes on google docs: https://developers.google.com/identity/protocols/oauth2/scopes\n */\nvar loadClientAuth2 = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(gapiScript, clientId, scopes) {\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt(\"return\", new Promise(function (resolve) {\n              gapiScript.load('client', function () {\n                resolve(gapiScript.client.init({\n                  client_id: clientId,\n                  scope: scopes\n                }));\n              });\n              gapiScript.load('auth2', function () {\n                resolve(gapiScript.client.init({\n                  client_id: clientId,\n                  scope: scopes\n                }));\n              });\n            }));\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return function loadClientAuth2(_x6, _x7, _x8) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\n/**\n * A very special function to load the gapi inside the DOM, directly.\n * So it'll load the real and most recent gapi-scrip from google and attach to DOM:\n * let gapi = loadGapiInsideDOM();\n * Now you can use it anywhere.\n */\nvar loadGapiInsideDOM = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            return _context5.abrupt(\"return\", new Promise(function (resolve) {\n              var element = document.getElementsByTagName('script')[0];\n              var js = document.createElement('script');\n              js.id = 'google-platform';\n              js.src = '//apis.google.com/js/platform.js';\n              js.async = true;\n              js.defer = true;\n              element.parentNode.insertBefore(js, element);\n              js.onload = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n                return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n                  while (1) {\n                    switch (_context4.prev = _context4.next) {\n                      case 0:\n                        resolve(window.gapi);\n                      case 1:\n                      case \"end\":\n                        return _context4.stop();\n                    }\n                  }\n                }, _callee4);\n              }));\n            }));\n          case 1:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n  return function loadGapiInsideDOM() {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport { gapi, gapiComplete, loadAuth2, loadAuth2WithProps, loadClientAuth2, loadGapiInsideDOM };","map":{"version":3,"names":["gapi","gapiComplete","loadAuth2","gapiScript","clientId","scopes","Promise","resolve","load","auth2","init","client_id","scope","loadAuth2WithProps","props","loadClientAuth2","client","loadGapiInsideDOM","element","document","getElementsByTagName","js","createElement","id","src","async","defer","parentNode","insertBefore","onload","window"],"sources":["C:/Users/Yehuda/Desktop/tech career/projects/git/memoriesNew/memories/client/node_modules/gapi-script/index.js"],"sourcesContent":["import { gapi, gapiComplete } from './gapiScript';\n\n/**\n * Function to load gapi auth2 from a gapi that you provied\n * Check full docs here: https://developers.google.com/identity/sign-in/web/reference#auth_setup\n * @param {Object} gapiScript gapi script object\n * @param {string} clientId Your google clientID string\n * @param {Array.<string[]>} scopes The scopes to request, as a space-delimited string. Optional if fetch_basic_profile is not set to false. Check possible scopes on google docs: https://developers.google.com/identity/protocols/oauth2/scopes\n */\nconst loadAuth2 = async function (gapiScript, clientId, scopes) {\n  return new Promise(resolve => {\n    gapiScript.load('auth2', () => {\n      resolve(gapiScript.auth2.init({\n        client_id: clientId,\n        scope: scopes\n      }));\n    });\n  });\n}\n\n/**\n * Function to init gapi auth2 with props\n * @param {Object} gapiScript gapi script object\n * @param {*} props Possible props to init gapi auth2, check the options on google docs: https://developers.google.com/identity/sign-in/web/reference#gapiauth2clientconfig\n */\nconst loadAuth2WithProps = async function (gapiScript, props) {\n  return new Promise(resolve => {\n    gapiScript.load('auth2', () => {\n      resolve(gapiScript.auth2.init(props));\n    });\n  });\n}\n\n/**\n *\n * @param {Object} gapiScript gapi script object\n * @param {string} clientId Your google clientID string\n * @param {Array.<string[]>} scopes The scopes to request, as a space-delimited string. Optional if fetch_basic_profile is not set to false. Check possible scopes on google docs: https://developers.google.com/identity/protocols/oauth2/scopes\n */\nconst loadClientAuth2 = async function (gapiScript, clientId, scopes) {\n  return new Promise(resolve => {\n      gapiScript.load('client', () => {\n          resolve(gapiScript.client.init({\n              client_id: clientId,\n              scope: scopes\n          }));\n      });\n      gapiScript.load('auth2', () => {\n          resolve(gapiScript.client.init({\n              client_id: clientId,\n              scope: scopes\n          }));\n      });\n  });\n}\n\n/**\n * A very special function to load the gapi inside the DOM, directly.\n * So it'll load the real and most recent gapi-scrip from google and attach to DOM:\n * let gapi = loadGapiInsideDOM();\n * Now you can use it anywhere.\n */\nconst loadGapiInsideDOM = async function () {\n  return new Promise(resolve => {\n    const element = document.getElementsByTagName('script')[0];\n    const js = document.createElement('script');\n    js.id = 'google-platform';\n    js.src = '//apis.google.com/js/platform.js';\n    js.async = true;\n    js.defer = true;\n    element.parentNode.insertBefore(js, element);\n    js.onload = async () => {\n      resolve(window.gapi);\n    }\n  });\n}\n\nexport {\n  gapi,\n  gapiComplete,\n  loadAuth2,\n  loadAuth2WithProps,\n  loadClientAuth2,\n  loadGapiInsideDOM,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}